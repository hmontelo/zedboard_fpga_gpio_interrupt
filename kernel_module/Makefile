# Initially, it is necessary to export a few variables. The target architecture
# is set with the variable ARCH to the ARM architechture. After this the 
# CROSS_COMPILE variable is set to tell make which compiler to use. 
# In the case of the Zynq platform, arm-xilinx-linux-gnueabi- should be used. 
# The compiler is set to gcc. Finally, the name of the target module is set.
#export ARCH:=arm
#export CROSS_COMPILE:=arm-linux-gnueabihf-

CC=$(CROSS_COMPILE)gcc

TARGET_MODULE := gpio_interrupt

SHELL := /bin/bash

# This line below lists of kernel modules to be built. The += assignment ensures
# that the operand is appended to the list, rather than overwriting the current 
# content.
obj-m += $(TARGET_MODULE).o

# In order for kbuild to correctly build the module, it needs to know the 
# location of the kernel headers of the kernel that the module is being built 
# for. This information is given in the KDIR variable. The location of the built
# files is given in the PWD variable. Here, the shell keyword is used to execute
# a command in the shell. In this case pwd is called to print the current 
# directory. For this reason make should always be called from the folder where 
# the makefile is present.
#KDIR:=/usr/src/linux-headers-${shell uname -r}
KDIR:=/usr/src/plnx_kernel
PWD:=$(shell pwd)

# The default rule calls make with the -C flag. This flag changes directory to, 
# in this case, KDIR, the directory where the linux header files are present. 
# M= lets kbuild know that an external module is being built and the given 
# argument is the directory that the module is placed in, in this case the 
# working directory. modules, while not strictly necessary, serves as a 
# placeholder for the target. 
# Finally, the clean recipe will use kbuild to remove any files generated by 
# the build process
   
default:
# run kernel build system to make module
	${MAKE} -C ${KDIR} M=${PWD} modules
all: 
# run kernel build system to make module
	${MAKE} -C ${KDIR} M=${PWD} modules
	
clean:
# run kernel build system to cleanup in current directory
	${MAKE} -C ${KDIR} M=${PWD} clean
	$(RM) -R .tmp*	
	
load:
	./load_module.sh $(TARGET_MODULE).ko
	
unload:
	./unload_module.sh $(TARGET_MODULE).ko
    
	

